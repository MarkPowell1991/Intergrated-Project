/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desktopappgui.Frames.Panels;

import adminDataModel.DataContainer;
import adminDataModel.Event;
import adminDataModel.Show;
import adminDataModel.Venue;
import desktopappgui.Frames.FormAddBooking;
import desktopappgui.Frames.FormAddEvent;
import desktopappgui.Frames.FormAddShow;
import desktopappgui.Frames.FormAddVenue;
import desktopappgui.Frames.FormEditEvent;
import desktopappgui.Frames.FormEditShow;
import desktopappgui.Frames.FormEditVenue;
import java.util.ArrayList;
import java.time.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import static javax.swing.JOptionPane.YES_OPTION;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import utilities.IObserver;

public class PanelVenue extends javax.swing.JPanel implements IObserver {

    DefaultTableModel venueTableModel;
    DefaultTableModel eventTableModel;
    DefaultListModel<LocalDate> dateListModel;
    DefaultListModel<LocalTime> timeListModel;
    DefaultComboBoxModel<LocalDate> monthModel = new DefaultComboBoxModel<>();

    DataContainer venueList = DataContainer.getInstance();
    ArrayList<Event> tempEventList = new ArrayList();
    ArrayList<Show> tempShowList = new ArrayList();

    public PanelVenue() {
        dateListModel = new DefaultListModel();
        timeListModel = new DefaultListModel();
        initComponents();
        venueList.registerObserver(this);
        venueTableModel = (DefaultTableModel) jTableVenues.getModel();
        eventTableModel = (DefaultTableModel) jTableEvents.getModel();
        refreshTables();
    }
    
    private void refreshTables() {
        refreshVenueTable();
        refreshEventTable();
        refreshMonthBox();
    }

    private void refreshVenueTable() {
        venueTableModel.setRowCount(0);
        for (Venue objCurrItem : venueList.getVenueList()) {
            venueTableModel.addRow(objCurrItem.toTableData());
        }
    }

    private void refreshEventTable() {
        eventTableModel.setRowCount(0);
        for (Event objCurrItem : tempEventList) {
            eventTableModel.addRow(objCurrItem.toTableData());
        }
    }

    private void refreshMonthBox() {
        cmbMonth.removeAllItems();
        ArrayList<Month> tempMonthList = new ArrayList();
        for (Show curr : tempShowList) {
            if (!tempMonthList.contains(curr.getStartTime().getMonth())) {
                tempMonthList.add(curr.getStartTime().getMonth());
            }
        }
        for (Month curr : tempMonthList) {
            cmbMonth.addItem(curr);
        }
        
        //refreshTimeList(jListTime.Ind);
    }

    private void refreshDateList(Month m) {
        dateListModel.removeAllElements();
        ArrayList<LocalDate> tempDateList = new ArrayList();
        for (Show curr : tempShowList) {
            if (curr.getStartTime().getMonth() == m && !checkDateInList(tempDateList, curr.getStartTime().toLocalDate())) {
                tempDateList.add(curr.getStartTime().toLocalDate());
            }
        }
        for (LocalDate curr : tempDateList) {
            dateListModel.addElement(curr);
        }
    }

    private void refreshTimeList(LocalDate date) {
        timeListModel.removeAllElements();
        for (Show curr : tempShowList) {
            if (curr.getStartTime().toLocalDate().equals(date)) {
                timeListModel.addElement(curr.getStartTime().toLocalTime());
            }
        }
    }

    private boolean checkDateInList(ArrayList<LocalDate> list, LocalDate date) {
        for (LocalDate curr : list) {
            if (curr.equals(date)) {
                return true;
            }
        }
        return false;
    }

    private void filterVenue(String query) {
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(venueTableModel);
        jTableVenues.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + query));
    }

    private void filterEvent(String query) {
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(eventTableModel);
        jTableEvents.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + query));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        pForm = new javax.swing.JPanel();
        pMain = new javax.swing.JPanel();
        pVenueSection = new javax.swing.JPanel();
        pVenues = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableVenues = new javax.swing.JTable();
        pControls = new javax.swing.JPanel();
        btnEditVenue = new javax.swing.JButton();
        btnAddVenue = new javax.swing.JButton();
        pSearchVenue = new javax.swing.JPanel();
        txtSearchVenue = new javax.swing.JTextField();
        btnSearchVenue = new javax.swing.JButton();
        lbVenues = new javax.swing.JLabel();
        pEventSection = new javax.swing.JPanel();
        pEvents = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEvents = new javax.swing.JTable();
        pEventControls = new javax.swing.JPanel();
        btnAddEvent = new javax.swing.JButton();
        btnEditEvent = new javax.swing.JButton();
        pSearchEvents = new javax.swing.JPanel();
        txtSearchEvents = new javax.swing.JTextField();
        btnSearchEvents = new javax.swing.JButton();
        lbEvents = new javax.swing.JLabel();
        pEventScheduleSection = new javax.swing.JPanel();
        pBooking = new javax.swing.JPanel();
        pTimePicker = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListTime = new javax.swing.JList<>();
        pDatePicker = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListDate = new javax.swing.JList<>();
        pVenueControls1 = new javax.swing.JPanel();
        btnAddShowing = new javax.swing.JButton();
        btnEditShowing = new javax.swing.JButton();
        btnMakeBooking = new javax.swing.JButton();
        pMonthPicker = new javax.swing.JPanel();
        lbMonth = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        lbEventShedule = new javax.swing.JLabel();
        pHeading = new javax.swing.JPanel();
        lbHeading = new javax.swing.JLabel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setPreferredSize(new java.awt.Dimension(1200, 650));

        pForm.setBackground(new java.awt.Color(146, 202, 195));

        pMain.setBackground(new java.awt.Color(245, 245, 245));

        pVenueSection.setBackground(new java.awt.Color(245, 245, 245));

        pVenues.setBackground(new java.awt.Color(250, 250, 250));
        pVenues.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        jTableVenues.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableVenues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Address", "City", "Parking Available", "Disability Access", "Capacity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVenues.setGridColor(new java.awt.Color(255, 255, 255));
        jTableVenues.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableVenues.setShowHorizontalLines(false);
        jTableVenues.setShowVerticalLines(false);
        jTableVenues.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVenuesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableVenues);
        if (jTableVenues.getColumnModel().getColumnCount() > 0) {
            jTableVenues.getColumnModel().getColumn(0).setResizable(false);
            jTableVenues.getColumnModel().getColumn(1).setResizable(false);
            jTableVenues.getColumnModel().getColumn(2).setResizable(false);
            jTableVenues.getColumnModel().getColumn(3).setResizable(false);
            jTableVenues.getColumnModel().getColumn(4).setResizable(false);
        }

        pControls.setBackground(new java.awt.Color(250, 250, 250));

        btnEditVenue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditVenue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/Icons/buttons/edit.png"))); // NOI18N
        btnEditVenue.setText("Edit Item");
        btnEditVenue.setBorder(null);
        btnEditVenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditVenueActionPerformed(evt);
            }
        });

        btnAddVenue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddVenue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/Icons/buttons/add.png"))); // NOI18N
        btnAddVenue.setText("Create New");
        btnAddVenue.setBorder(null);
        btnAddVenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVenueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pControlsLayout = new javax.swing.GroupLayout(pControls);
        pControls.setLayout(pControlsLayout);
        pControlsLayout.setHorizontalGroup(
            pControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pControlsLayout.createSequentialGroup()
                .addComponent(btnAddVenue, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditVenue, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pControlsLayout.setVerticalGroup(
            pControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pControlsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVenue, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditVenue, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        pSearchVenue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        pSearchVenue.setLayout(new javax.swing.BoxLayout(pSearchVenue, javax.swing.BoxLayout.LINE_AXIS));

        txtSearchVenue.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        pSearchVenue.add(txtSearchVenue);

        btnSearchVenue.setBackground(new java.awt.Color(153, 153, 153));
        btnSearchVenue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchVenue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/Icons/buttons/search.png"))); // NOI18N
        btnSearchVenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchVenueActionPerformed(evt);
            }
        });
        pSearchVenue.add(btnSearchVenue);

        javax.swing.GroupLayout pVenuesLayout = new javax.swing.GroupLayout(pVenues);
        pVenues.setLayout(pVenuesLayout);
        pVenuesLayout.setHorizontalGroup(
            pVenuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pVenuesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pVenuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pSearchVenue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        pVenuesLayout.setVerticalGroup(
            pVenuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pVenuesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pSearchVenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(pControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );

        lbVenues.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        lbVenues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/venue.png"))); // NOI18N
        lbVenues.setText("Venue Listing");
        lbVenues.setToolTipText("");

        javax.swing.GroupLayout pVenueSectionLayout = new javax.swing.GroupLayout(pVenueSection);
        pVenueSection.setLayout(pVenueSectionLayout);
        pVenueSectionLayout.setHorizontalGroup(
            pVenueSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pVenueSectionLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pVenueSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pVenues, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbVenues))
                .addGap(0, 0, 0))
        );
        pVenueSectionLayout.setVerticalGroup(
            pVenueSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pVenueSectionLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lbVenues)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pVenues, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pEventSection.setBackground(new java.awt.Color(245, 245, 245));
        pEventSection.setPreferredSize(new java.awt.Dimension(599, 330));

        pEvents.setBackground(new java.awt.Color(250, 250, 250));
        pEvents.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        jTableEvents.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Type", "Genre", "Rating"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEvents.setGridColor(new java.awt.Color(255, 255, 255));
        jTableEvents.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableEvents.setShowHorizontalLines(false);
        jTableEvents.setShowVerticalLines(false);
        jTableEvents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEventsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableEvents);

        pEventControls.setBackground(new java.awt.Color(250, 250, 250));

        btnAddEvent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddEvent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/Icons/buttons/add.png"))); // NOI18N
        btnAddEvent.setText("Create New");
        btnAddEvent.setBorder(null);
        btnAddEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEventActionPerformed(evt);
            }
        });

        btnEditEvent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditEvent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/Icons/buttons/edit.png"))); // NOI18N
        btnEditEvent.setText("Edit Item");
        btnEditEvent.setBorder(null);
        btnEditEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditEventActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pEventControlsLayout = new javax.swing.GroupLayout(pEventControls);
        pEventControls.setLayout(pEventControlsLayout);
        pEventControlsLayout.setHorizontalGroup(
            pEventControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pEventControlsLayout.createSequentialGroup()
                .addComponent(btnAddEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pEventControlsLayout.setVerticalGroup(
            pEventControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pEventControlsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pEventControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEditEvent, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(btnAddEvent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pSearchEvents.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        pSearchEvents.setLayout(new javax.swing.BoxLayout(pSearchEvents, javax.swing.BoxLayout.LINE_AXIS));

        txtSearchEvents.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        pSearchEvents.add(txtSearchEvents);

        btnSearchEvents.setBackground(new java.awt.Color(153, 153, 153));
        btnSearchEvents.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchEvents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/Icons/buttons/search.png"))); // NOI18N
        btnSearchEvents.setToolTipText("");
        btnSearchEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchEventsActionPerformed(evt);
            }
        });
        pSearchEvents.add(btnSearchEvents);

        javax.swing.GroupLayout pEventsLayout = new javax.swing.GroupLayout(pEvents);
        pEvents.setLayout(pEventsLayout);
        pEventsLayout.setHorizontalGroup(
            pEventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pEventsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pEventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pEventControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pSearchEvents, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pEventsLayout.setVerticalGroup(
            pEventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pEventsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pSearchEvents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pEventControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        lbEvents.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        lbEvents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/event.png"))); // NOI18N
        lbEvents.setText("Event Listing (By Venue)");
        lbEvents.setToolTipText("");

        javax.swing.GroupLayout pEventSectionLayout = new javax.swing.GroupLayout(pEventSection);
        pEventSection.setLayout(pEventSectionLayout);
        pEventSectionLayout.setHorizontalGroup(
            pEventSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pEvents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pEventSectionLayout.createSequentialGroup()
                .addComponent(lbEvents)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pEventSectionLayout.setVerticalGroup(
            pEventSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pEventSectionLayout.createSequentialGroup()
                .addComponent(lbEvents)
                .addGap(5, 5, 5)
                .addComponent(pEvents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pEventScheduleSection.setBackground(new java.awt.Color(245, 245, 245));
        pEventScheduleSection.setPreferredSize(new java.awt.Dimension(426, 220));

        pBooking.setBackground(new java.awt.Color(204, 204, 204));
        pBooking.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        pTimePicker.setBackground(new java.awt.Color(230, 230, 230));
        pTimePicker.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/time.png"))); // NOI18N
        jLabel4.setText("Start Time");
        jLabel4.setIconTextGap(6);

        jScrollPane5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jListTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jListTime.setModel(timeListModel);
        jListTime.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane5.setViewportView(jListTime);

        javax.swing.GroupLayout pTimePickerLayout = new javax.swing.GroupLayout(pTimePicker);
        pTimePicker.setLayout(pTimePickerLayout);
        pTimePickerLayout.setHorizontalGroup(
            pTimePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
            .addGroup(pTimePickerLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pTimePickerLayout.setVerticalGroup(
            pTimePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTimePickerLayout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        pDatePicker.setBackground(new java.awt.Color(230, 230, 230));
        pDatePicker.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        pDatePicker.setForeground(new java.awt.Color(204, 204, 204));
        pDatePicker.setPreferredSize(new java.awt.Dimension(289, 34));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/Day.png"))); // NOI18N
        jLabel3.setText("Date");
        jLabel3.setIconTextGap(6);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jListDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jListDate.setModel(dateListModel);
        jListDate.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListDate.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDateValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jListDate);

        javax.swing.GroupLayout pDatePickerLayout = new javax.swing.GroupLayout(pDatePicker);
        pDatePicker.setLayout(pDatePickerLayout);
        pDatePickerLayout.setHorizontalGroup(
            pDatePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
            .addGroup(pDatePickerLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pDatePickerLayout.setVerticalGroup(
            pDatePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDatePickerLayout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
        );

        pVenueControls1.setBackground(new java.awt.Color(250, 250, 250));

        btnAddShowing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddShowing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/show.png"))); // NOI18N
        btnAddShowing.setText("Add Showing");
        btnAddShowing.setBorder(null);
        btnAddShowing.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnAddShowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddShowingActionPerformed(evt);
            }
        });

        btnEditShowing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditShowing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/Icons/buttons/edit.png"))); // NOI18N
        btnEditShowing.setText("Edit Showing");
        btnEditShowing.setBorder(null);
        btnEditShowing.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnEditShowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditShowingActionPerformed(evt);
            }
        });

        btnMakeBooking.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnMakeBooking.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/booking.png"))); // NOI18N
        btnMakeBooking.setText("Make Booking");
        btnMakeBooking.setBorder(null);
        btnMakeBooking.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnMakeBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeBookingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pVenueControls1Layout = new javax.swing.GroupLayout(pVenueControls1);
        pVenueControls1.setLayout(pVenueControls1Layout);
        pVenueControls1Layout.setHorizontalGroup(
            pVenueControls1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pVenueControls1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(btnAddShowing, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditShowing, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMakeBooking, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        pVenueControls1Layout.setVerticalGroup(
            pVenueControls1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pVenueControls1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(pVenueControls1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddShowing, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(btnEditShowing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMakeBooking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );

        pMonthPicker.setBackground(new java.awt.Color(250, 250, 250));

        lbMonth.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbMonth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/month.png"))); // NOI18N
        lbMonth.setText("Month:");
        lbMonth.setIconTextGap(6);

        cmbMonth.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMonthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pMonthPickerLayout = new javax.swing.GroupLayout(pMonthPicker);
        pMonthPicker.setLayout(pMonthPickerLayout);
        pMonthPickerLayout.setHorizontalGroup(
            pMonthPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pMonthPickerLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pMonthPickerLayout.setVerticalGroup(
            pMonthPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pMonthPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout pBookingLayout = new javax.swing.GroupLayout(pBooking);
        pBooking.setLayout(pBookingLayout);
        pBookingLayout.setHorizontalGroup(
            pBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pBookingLayout.createSequentialGroup()
                .addComponent(pDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(pTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(pVenueControls1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pBookingLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pMonthPicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        pBookingLayout.setVerticalGroup(
            pBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pBookingLayout.createSequentialGroup()
                .addComponent(pMonthPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(pBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(pTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addComponent(pVenueControls1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        lbEventShedule.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        lbEventShedule.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/eventShedule.png"))); // NOI18N
        lbEventShedule.setText("Current Venue Schedule");
        lbEventShedule.setToolTipText("");

        javax.swing.GroupLayout pEventScheduleSectionLayout = new javax.swing.GroupLayout(pEventScheduleSection);
        pEventScheduleSection.setLayout(pEventScheduleSectionLayout);
        pEventScheduleSectionLayout.setHorizontalGroup(
            pEventScheduleSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pEventScheduleSectionLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pEventScheduleSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pBooking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pEventScheduleSectionLayout.createSequentialGroup()
                        .addComponent(lbEventShedule)
                        .addContainerGap())))
        );
        pEventScheduleSectionLayout.setVerticalGroup(
            pEventScheduleSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pEventScheduleSectionLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lbEventShedule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pBooking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pMainLayout = new javax.swing.GroupLayout(pMain);
        pMain.setLayout(pMainLayout);
        pMainLayout.setHorizontalGroup(
            pMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pVenueSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pEventScheduleSection, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                    .addComponent(pEventSection, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
                .addContainerGap())
        );
        pMainLayout.setVerticalGroup(
            pMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pVenueSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pMainLayout.createSequentialGroup()
                        .addComponent(pEventSection, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pEventScheduleSection, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pHeading.setBackground(new java.awt.Color(255, 255, 255));
        pHeading.setPreferredSize(new java.awt.Dimension(775, 65));

        lbHeading.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lbHeading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/Icons/panels/venues.png"))); // NOI18N
        lbHeading.setText("Venues");

        javax.swing.GroupLayout pHeadingLayout = new javax.swing.GroupLayout(pHeading);
        pHeading.setLayout(pHeadingLayout);
        pHeadingLayout.setHorizontalGroup(
            pHeadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pHeadingLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lbHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pHeadingLayout.setVerticalGroup(
            pHeadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pHeadingLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout pFormLayout = new javax.swing.GroupLayout(pForm);
        pForm.setLayout(pFormLayout);
        pFormLayout.setHorizontalGroup(
            pFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pHeading, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        pFormLayout.setVerticalGroup(
            pFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFormLayout.createSequentialGroup()
                .addComponent(pHeading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddVenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVenueActionPerformed
        FormAddVenue objWindow = new FormAddVenue();
        objWindow.setVisible(true);
    }//GEN-LAST:event_btnAddVenueActionPerformed

    private void btnAddEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEventActionPerformed
        FormAddEvent objWindow = new FormAddEvent();
        objWindow.setVisible(true);
    }//GEN-LAST:event_btnAddEventActionPerformed

    private void jTableVenuesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVenuesMouseClicked
        Venue v = venueList.getVenueList().get(jTableVenues.getSelectedRow());
        tempEventList = new ArrayList();
        Boolean b;
        for (Show object : venueList.getShowList()) {
            if (v.getVenueId() == object.getVenue().getVenueId() && !tempEventList.contains(object.getEvent())) {
                b = true;
                for (Event e : tempEventList) {
                    if (e.equals(object.getEvent())) {
                        b = false;
                        break;
                    }
                }
                if (b) {
                    tempEventList.add(object.getEvent());
                }
            }
        }
        refreshEventTable();
        refreshMonthBox();
    }//GEN-LAST:event_jTableVenuesMouseClicked

    private void jTableEventsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEventsMouseClicked
        Event e = tempEventList.get(jTableEvents.getSelectedRow());
        Venue v = venueList.getVenueList().get(jTableVenues.getSelectedRow());
        for (Show curr : venueList.getShowList()) {
            if (curr.getEvent().equals(e) && v.equals(curr.getVenue())) {
                tempShowList.add(curr);
            }
        }
        refreshMonthBox();
        //refreshTimeBox(null);
    }//GEN-LAST:event_jTableEventsMouseClicked

    private void btnAddShowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddShowingActionPerformed
        FormAddShow objWindow = new FormAddShow();
        int v = jTableVenues.getSelectedRow() > 0 ? jTableVenues.getSelectedRow() : 0,
                e = jTableEvents.getSelectedRow() > 0 ? jTableEvents.getSelectedRow() : 0;
        objWindow.setSelectedVenue(venueList.getVenueList().get(v));
        if (e > 0) {
            objWindow.setSelectedEvent(tempEventList.get(e));
        }
        objWindow.setVisible(true);
    }//GEN-LAST:event_btnAddShowingActionPerformed

    private void btnSearchVenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchVenueActionPerformed
        String query = txtSearchVenue.getText().toLowerCase();
        filterVenue(query);
    }//GEN-LAST:event_btnSearchVenueActionPerformed

    private void btnSearchEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchEventsActionPerformed
        String query = txtSearchEvents.getText().toLowerCase();
        filterEvent(query);
    }//GEN-LAST:event_btnSearchEventsActionPerformed

    private void jListDateValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDateValueChanged
        LocalDate date = null;
        date = (LocalDate) jListDate.getSelectedValue();
        refreshTimeList(date);
    }//GEN-LAST:event_jListDateValueChanged

    private void btnMakeBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeBookingActionPerformed
        FormAddBooking objWindow = new FormAddBooking();
        int e = jTableEvents.getSelectedRow() > 0 ? jTableEvents.getSelectedRow() : 0;
        int v = jTableVenues.getSelectedRow() > 0 ? jTableVenues.getSelectedRow() : 0;
        int d = jListDate.getSelectedIndex();
        int t = jListTime.getSelectedIndex();
        objWindow.setSelectedEvent(tempEventList.get(e));
        objWindow.setSelectedVenue(venueList.getVenueList().get(v));
        for (Show curr : venueList.getShowList()) {
            if (curr.getEvent().getEventId() == venueList.getEventList().get(e).getEventId() && curr.getVenue().getVenueId() == venueList.getVenueList().get(v).getVenueId()
                    && d > 0 && t > 0 && curr.getStartTime().equals(LocalDateTime.of((LocalDate) jListDate.getSelectedValue(), (LocalTime) jListTime.getSelectedValue()))) {
                objWindow.setSelectedTime(curr.getStartTime());
                break;
            }
        }
        objWindow.setVisible(true);
    }//GEN-LAST:event_btnMakeBookingActionPerformed

    private void btnEditShowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditShowingActionPerformed
        FormEditShow objWindow = new FormEditShow();
        int e = jTableEvents.getSelectedRow() > 0 ? jTableEvents.getSelectedRow() : 0;
        int v = jTableVenues.getSelectedRow() > 0 ? jTableVenues.getSelectedRow() : 0;
        int d = jListDate.getSelectedIndex() > 0 ? jListDate.getSelectedIndex() : 0;
        int t = jListTime.getSelectedIndex() > 0 ? jListTime.getSelectedIndex() : 0;
        for (Show curr : venueList.getShowList()) {
            if (curr.getVenue().getVenueId() == venueList.getVenueList().get(v).getVenueId() && tempEventList.size() > 0 && curr.getEvent().getEventId() == tempEventList.get(e).getEventId()
                    && d >= 0 && t >= 0 && curr.getStartTime().equals(LocalDateTime.of(dateListModel.elementAt(jListDate.getSelectedIndex()), timeListModel.elementAt(jListTime.getSelectedIndex())))) {
                objWindow.setToUpdate(curr);
                objWindow.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_btnEditShowingActionPerformed

    private void btnEditVenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditVenueActionPerformed
        FormEditVenue objWindow = new FormEditVenue();
        objWindow.setToUpdate(venueList.getVenueList().get(jTableVenues.getSelectedRow()));
        objWindow.setVisible(true);
    }//GEN-LAST:event_btnEditVenueActionPerformed

    private void btnEditEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditEventActionPerformed
        if (jTableEvents.getSelectedRow() >= 0) {
            FormEditEvent objWindow = new FormEditEvent();
            objWindow.setToUpdate(tempEventList.get(jTableEvents.getSelectedRow()));
            objWindow.setVisible(true);
        }
    }//GEN-LAST:event_btnEditEventActionPerformed

    private void cmbMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMonthActionPerformed
        Month m = (Month) cmbMonth.getSelectedItem();
        refreshDateList(m);
    }//GEN-LAST:event_cmbMonthActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEvent;
    private javax.swing.JButton btnAddShowing;
    private javax.swing.JButton btnAddVenue;
    private javax.swing.JButton btnEditEvent;
    private javax.swing.JButton btnEditShowing;
    private javax.swing.JButton btnEditVenue;
    private javax.swing.JButton btnMakeBooking;
    private javax.swing.JButton btnSearchEvents;
    private javax.swing.JButton btnSearchVenue;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<LocalDate> jListDate;
    private javax.swing.JList<LocalTime> jListTime;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTableEvents;
    private javax.swing.JTable jTableVenues;
    private javax.swing.JLabel lbEventShedule;
    private javax.swing.JLabel lbEvents;
    private javax.swing.JLabel lbHeading;
    private javax.swing.JLabel lbMonth;
    private javax.swing.JLabel lbVenues;
    private javax.swing.JPanel pBooking;
    private javax.swing.JPanel pControls;
    private javax.swing.JPanel pDatePicker;
    private javax.swing.JPanel pEventControls;
    private javax.swing.JPanel pEventScheduleSection;
    private javax.swing.JPanel pEventSection;
    private javax.swing.JPanel pEvents;
    private javax.swing.JPanel pForm;
    private javax.swing.JPanel pHeading;
    private javax.swing.JPanel pMain;
    private javax.swing.JPanel pMonthPicker;
    private javax.swing.JPanel pSearchEvents;
    private javax.swing.JPanel pSearchVenue;
    private javax.swing.JPanel pTimePicker;
    private javax.swing.JPanel pVenueControls1;
    private javax.swing.JPanel pVenueSection;
    private javax.swing.JPanel pVenues;
    private javax.swing.JTextField txtSearchEvents;
    private javax.swing.JTextField txtSearchVenue;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update() {
        refreshTables();
    }
}
